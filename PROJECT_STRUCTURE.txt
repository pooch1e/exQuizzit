EXQUIZZIT - PROJECT STRUCTURE DOCUMENTATION
==========================================

This document explains the purpose of each folder and file in the exQuizzit quiz application.

ROOT DIRECTORY
==============
├── .env                    - Environment variables (database URLs, API keys)
├── .gitignore             - Git ignore patterns
├── README.md              - Project documentation and setup instructions
├── SETUP.md               - Additional setup instructions
├── PROJECT_STRUCTURE.txt  - This file - complete project documentation
├── package.json           - Node.js dependencies and scripts
├── next.config.ts         - Next.js configuration
├── next-env.d.ts          - Next.js TypeScript declarations
├── tsconfig.json          - TypeScript compiler configuration
├── postcss.config.mjs     - PostCSS configuration for Tailwind CSS
├── eslint.config.mjs      - ESLint configuration for code linting
├── jest.config.js         - Jest testing framework configuration
├── jest.setup.ts          - Jest test setup file
├── clearDb.ts             - Database cleanup utility
├── seed.ts                - Database seeding script
└── earth-globe.json       - SVG data for the animated earth globe

SRC DIRECTORY STRUCTURE
=======================

src/
├── app/                   - Next.js 13+ App Router directory
│   ├── globals.css        - Global CSS styles including Tailwind + custom scrollbar
│   ├── layout.tsx         - Root layout component (wraps all pages)
│   ├── page.tsx           - Login page component (no emojis, updated styling)
│   │
│   ├── api/               - API routes (server-side endpoints)
│   │   ├── countries/
│   │   │   └── route.ts   - REST API for countries data
│   │   ├── games/
│   │   │   └── route.ts   - REST API for game records
│   │   ├── quiz/
│   │   │   └── questions/
│   │   │       └── route.ts - Main quiz questions API (every 3rd = trivia)
│   │   ├── trivia/
│   │   │   └── route.ts   - External trivia API integration
│   │   └── users/
│   │       └── route.ts   - User management API
│   │
│   ├── home/              - Home page (post-login)
│   │   └── page.tsx       - Home page with animated globe and profile
│   │
│   ├── leaderboard/
│   │   └── page.tsx       - Leaderboard page with scrollable tables
│   │
│   ├── quiz/
│   │   └── page.tsx       - Quiz game page component
│   │
│   ├── test-api/
│   │   └── page.tsx       - API testing page for development
│   │
│   └── lib/               - Shared utilities and services
│       ├── connections.ts - Database connection helpers
│       ├── prisma.ts      - Prisma client configuration and utilities
│       ├── supabaseClient.ts - Supabase client configuration
│       │
│       ├── services/      - Business logic services
│       │   ├── CountryService.ts    - Handles country data operations
│       │   ├── QuestionService.ts   - Quiz question generation + mixing logic
│       │   └── triviaService.ts     - External trivia API service
│       │
│       └── utils/         - Utility functions
│           ├── decodeHTML.ts        - HTML entity decoding
│           └── shuffleArray.ts      - Array randomization utility
│
├── components/            - Reusable React components
│   ├── QuizClient.tsx     - Main quiz game component with timer bar & improved UX
│   ├── QuizClient-backup.tsx - Backup of quiz component
│   ├── SpaceBackground.tsx - Reusable space-themed background component
│   └── EarthAnimation.tsx - CSS/JS animated globe with orbiting flags
│
└── data/                  - Static data files
    ├── development-data/
    │   └── countries-data.js - Fallback countries data (195+ countries)
    └── test-data/         - Test data for development/testing
        ├── countries-test.js - Test countries data
        ├── game-test.js     - Test game data
        ├── users-test.js    - Test user data
        └── index.js         - Test data exports

PRISMA DIRECTORY
================
prisma/
├── schema.prisma          - Database schema definition (Users, Countries, Games)
├── seed.ts               - Production database seeding
├── seed-test-db.ts       - Test database seeding
├── seedCountries.ts      - Countries data seeding script
└── migrations/           - Database migration files
    ├── migration_lock.toml
    └── 20250707103742_init/
        └── migration.sql  - Initial database schema migration

GENERATED DIRECTORY
==================
generated/
└── prisma/               - Generated Prisma client files
    ├── client.js         - Main Prisma client
    ├── client.d.ts       - TypeScript definitions
    ├── index.js          - Client exports
    └── runtime/          - Prisma runtime files

TESTS DIRECTORY
===============
__tests__/
├── db.test.ts            - Database operation tests
└── utils.test.ts         - Utility function tests

KEY FEATURES & ARCHITECTURE
===========================

1. FRONTEND (Next.js 13+ App Router)
   - React Server Components and Client Components
   - Tailwind CSS for styling with space theme + custom yellow borders
   - Mobile-responsive design with modern UI/UX
   - TypeScript for type safety
   - Animated CSS globe with orbiting flags (replaced Lottie)
   - Visual timer bar with smooth animations
   - QuizzBucks display with coin emoji
   - Hover effects on buttons (scale, yellow borders, darkening)

2. BACKEND (API Routes)
   - RESTful API endpoints
   - Prisma ORM for database operations
   - Supabase PostgreSQL database
   - Service layer architecture
   - Question mixing logic (every 3rd question = trivia)

3. DATABASE (Supabase + Prisma)
   - Users table (user profiles, scores)
   - Countries table (flag quiz data)
   - Games table (game history)
   - Scrollable leaderboard tables

4. QUIZ LOGIC & USER EXPERIENCE
   - Flag identification questions (from database)
   - Trivia questions (from external API)
   - Every 3rd question guaranteed to be trivia
   - "Did You Know" facts for flag questions only
   - No modal for correct answers - inline feedback
   - Timer bar that shrinks from full width to zero (10 seconds)
   - Consistent answer button sizes regardless of content
   - Yellow border hover effects and 10% darkening
   - QuizzBucks display with coin emoji
   - Answer buttons always visible with color-coded feedback

5. VISUAL IMPROVEMENTS
   - Cartoon earth globe animation with CSS/JS
   - Synchronized flag orbiting (no bubbles/backgrounds)
   - Modern yellow and space-themed color scheme
   - Profile icon and username display
   - 10% scale hover effects on home page buttons
   - Thick yellow borders for interactive elements
   - Custom scrollbars with webkit styling

6. TESTING
   - Jest testing framework
   - Database testing utilities
   - Unit tests for utilities

7. DEPLOYMENT & DEVELOPMENT
   - Environment-based configuration
   - Database seeding scripts
   - Development API testing pages
   - ESLint code quality

MAIN USER FLOW
==============
1. User visits login page (page.tsx) - clean design, no emojis
2. User enters credentials and goes to home page (/home)
3. Home page displays animated globe, profile info, and styled buttons
4. User clicks "Start Quiz" to navigate to quiz (/quiz/page.tsx)
5. QuizClient component loads mixed questions from API
6. API fetches countries from Supabase + trivia from external API
7. Questions are mixed with every 3rd being trivia
8. User plays quiz with:
   - 10-second timer bar for each question
   - Immediate feedback (green for correct, red for wrong)
   - "Did You Know" facts for flag questions
   - QuizzBucks and score display
   - Answer buttons with hover effects
9. Scores are saved to database
10. User can view scrollable leaderboard

QUIZ UX IMPROVEMENTS
===================
- Timer: Visual bar that shrinks horizontally over 10 seconds
- Correct Answer: Green highlight, "Did You Know" fact for flags, no modal
- Wrong Answer: Red highlight for selected, green for correct, immediate feedback
- Answer Buttons: Always visible, consistent sizing, yellow border hover
- Navigation: Clean next/try again buttons, score persistence
- Mobile: Responsive design with proper touch targets

DEVELOPMENT WORKFLOW
===================
- npm run dev: Start development server
- npm run build: Build for production
- npm test: Run tests
- npx prisma db push: Update database schema
- npx prisma generate: Generate Prisma client
- npm run seed: Seed database with data

This architecture provides a scalable, maintainable quiz application with
robust error handling, fallback systems, modern UX, and a clean separation
of concerns. The visual improvements make it engaging while maintaining
excellent performance and mobile responsiveness.
